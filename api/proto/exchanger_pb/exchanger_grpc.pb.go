// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: exchanger.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangerServiceClient is the client API for ExchangerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangerServiceClient interface {
	ExchangeByPair(ctx context.Context, in *CurrencyPair, opts ...grpc.CallOption) (*ExchangeRate, error)
}

type exchangerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangerServiceClient(cc grpc.ClientConnInterface) ExchangerServiceClient {
	return &exchangerServiceClient{cc}
}

func (c *exchangerServiceClient) ExchangeByPair(ctx context.Context, in *CurrencyPair, opts ...grpc.CallOption) (*ExchangeRate, error) {
	out := new(ExchangeRate)
	err := c.cc.Invoke(ctx, "/ExchangerService/ExchangeByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangerServiceServer is the server API for ExchangerService service.
// All implementations must embed UnimplementedExchangerServiceServer
// for forward compatibility
type ExchangerServiceServer interface {
	ExchangeByPair(context.Context, *CurrencyPair) (*ExchangeRate, error)
	mustEmbedUnimplementedExchangerServiceServer()
}

// UnimplementedExchangerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExchangerServiceServer struct {
}

func (UnimplementedExchangerServiceServer) ExchangeByPair(context.Context, *CurrencyPair) (*ExchangeRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeByPair not implemented")
}
func (UnimplementedExchangerServiceServer) mustEmbedUnimplementedExchangerServiceServer() {}

// UnsafeExchangerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangerServiceServer will
// result in compilation errors.
type UnsafeExchangerServiceServer interface {
	mustEmbedUnimplementedExchangerServiceServer()
}

func RegisterExchangerServiceServer(s grpc.ServiceRegistrar, srv ExchangerServiceServer) {
	s.RegisterService(&ExchangerService_ServiceDesc, srv)
}

func _ExchangerService_ExchangeByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangerServiceServer).ExchangeByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExchangerService/ExchangeByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangerServiceServer).ExchangeByPair(ctx, req.(*CurrencyPair))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangerService_ServiceDesc is the grpc.ServiceDesc for ExchangerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ExchangerService",
	HandlerType: (*ExchangerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeByPair",
			Handler:    _ExchangerService_ExchangeByPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchanger.proto",
}
